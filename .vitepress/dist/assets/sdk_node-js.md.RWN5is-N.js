import{_ as s,c as e,o as a,V as t}from"./chunks/framework.tX0lWPPN.js";const g=JSON.parse('{"title":"Node.js SDK","description":"","frontmatter":{},"headers":[],"relativePath":"sdk/node-js.md","filePath":"sdk/node-js.md"}'),i={name:"sdk/node-js.md"},n=t(`<h1 id="node-js-sdk" tabindex="-1">Node.js SDK <a class="header-anchor" href="#node-js-sdk" aria-label="Permalink to &quot;Node.js SDK&quot;">​</a></h1><p>Unreal Speech Node.js SDK allows you to easily integrate the Unreal Speech API into your Node.js applications for text-to-speech (TTS) synthesis. This package provides convenient methods for working with the Unreal Speech API, including generating speech, managing synthesis tasks, and streaming audio.</p><p>To use the <code>play</code> utility, you should have FFmpeg installed on your system</p><h2 id="ffmpeg-installation" tabindex="-1">FFmpeg Installation <a class="header-anchor" href="#ffmpeg-installation" aria-label="Permalink to &quot;FFmpeg Installation&quot;">​</a></h2><h3 id="windows" tabindex="-1">Windows <a class="header-anchor" href="#windows" aria-label="Permalink to &quot;Windows&quot;">​</a></h3><p><strong>Download FFmpeg</strong>: Go to the FFmpeg official website (<a href="https://ffmpeg.org/download.html" target="_blank" rel="noreferrer">https://ffmpeg.org/download.html</a>) and download the latest build for Windows.</p><h3 id="mac" tabindex="-1">Mac <a class="header-anchor" href="#mac" aria-label="Permalink to &quot;Mac&quot;">​</a></h3><p><strong>Install Homebrew</strong>: If not already installed, open Terminal and run <code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code>.</p><h2 id="you-can-install-the-unreal-speech-node-js-sdk-via-npm" tabindex="-1">You can install the Unreal Speech Node.js SDK via npm: <a class="header-anchor" href="#you-can-install-the-unreal-speech-node-js-sdk-via-npm" aria-label="Permalink to &quot;You can install the Unreal Speech Node.js SDK via npm:&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i unrealspeech</span></span></code></pre></div><h2 id="available-endpoints" tabindex="-1">Available endpoints <a class="header-anchor" href="#available-endpoints" aria-label="Permalink to &quot;Available endpoints&quot;">​</a></h2><table><thead><tr><th>Endpoint</th><th>Description</th></tr></thead><tbody><tr><td><code>/stream</code></td><td>Stream audio for short, time-sensitive cases</td></tr><tr><td><code>/speech</code></td><td>Generate speech with options (MP3 format)</td></tr><tr><td><code>/synthesisTasks</code></td><td>Manage synthesis tasks for longer text</td></tr><tr><td><code>/synthesisTasks/TaskId</code></td><td>Check the status of a synthesis task</td></tr></tbody></table><h2 id="common-request-body-schema" tabindex="-1">Common Request Body Schema <a class="header-anchor" href="#common-request-body-schema" aria-label="Permalink to &quot;Common Request Body Schema&quot;">​</a></h2><table><thead><tr><th>Property</th><th>Type</th><th>Required?</th><th>Default Value</th><th>Allowed Values</th></tr></thead><tbody><tr><td>VoiceId</td><td>string</td><td>Required</td><td>N/A</td><td>Scarlett, Liv, Dan, Will, Amy</td></tr><tr><td>Bitrate</td><td>string</td><td>Optional</td><td>192k</td><td>16k, 32k, 48k, 64k, 128k, 192k, 256k, 320k</td></tr><tr><td>Speed</td><td>float</td><td>Optional</td><td>0</td><td>-1.0 to 1.0</td></tr><tr><td>Pitch</td><td>float</td><td>Optional</td><td>1.0</td><td>0.5 to 1.5</td></tr></tbody></table><h2 id="parameter-details" tabindex="-1">Parameter Details <a class="header-anchor" href="#parameter-details" aria-label="Permalink to &quot;Parameter Details&quot;">​</a></h2><ul><li><p><strong>VoiceId:</strong></p><ul><li>Dan: Young Male</li><li>Will: Mature Male</li><li>Scarlett: Young Female</li><li>Liv: Young Female</li><li>Amy: Mature Female</li></ul></li><li><p><strong>Bitrate:</strong> Defaults to 192k. Use lower values for low bandwidth or to reduce the transferred file size. Use higher values for higher fidelity.</p></li><li><p><strong>Speed:</strong> Defaults to 0. Examples:</p><ul><li>0.5: makes the audio 50% faster. (i.e., 60-second audio becomes 42 seconds)</li><li>-0.5: makes the audio 50% slower. (i.e., 60-second audio becomes 90 seconds.)</li></ul></li><li><p><strong>Pitch:</strong> Defaults to 1. However, on the landing page, we default male voices to 0.92 as people tend to prefer lower/deeper male voices.</p></li></ul><h2 id="rate-limit" tabindex="-1">Rate Limit <a class="header-anchor" href="#rate-limit" aria-label="Permalink to &quot;Rate Limit&quot;">​</a></h2><table><thead><tr><th>Plan</th><th>Requests per second</th></tr></thead><tbody><tr><td>Free</td><td>1</td></tr><tr><td>Basic</td><td>2</td></tr><tr><td>Pro</td><td>8</td></tr></tbody></table><h2 id="obtaining-an-api-key" tabindex="-1">Obtaining an API Key <a class="header-anchor" href="#obtaining-an-api-key" aria-label="Permalink to &quot;Obtaining an API Key&quot;">​</a></h2><p><a href="https://unrealspeech.com" target="_blank" rel="noreferrer">Get your API Key</a> To use the Unreal Speech API, you&#39;ll need to obtain an API key by signing up for an account on the Unreal Speech website. Once you have an API key, you can use it to initialize the UnrealSpeechAPI class.</p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>To use the SDK, you need to initialize it with your API key and other required configurations. Initialization</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { UnrealSpeechAPI, play, save } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;unrealspeech&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unrealSpeech</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UnrealSpeechAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;your_api_key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="methods" tabindex="-1">Methods <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;Methods&quot;">​</a></h3><h4 id="stream-text-voiceid-bitrate-speed-pitch-codec-temperature" tabindex="-1"><code>stream(text, voiceId, bitrate, speed, pitch, codec, temperature)</code> <a class="header-anchor" href="#stream-text-voiceid-bitrate-speed-pitch-codec-temperature" aria-label="Permalink to &quot;\`stream(text, voiceId, bitrate, speed, pitch, codec, temperature)\`&quot;">​</a></h4><p>This method streams the synthesized speech based on the provided parameters.</p><ul><li><code>text</code>: The text to be synthesized.</li><li><code>voiceId</code>: The ID of the voice to be used.</li><li><code>bitrate</code>: The bitrate of the audio.</li><li><code>speed</code>: The speed of speech.</li><li><code>pitch</code>: The pitch of speech.</li><li><code>codec</code>: The audio codec to be used.</li><li><code>temperature</code>: The temperature of speech.</li></ul><p>Returns: A promise that resolves to the synthesized speech buffer.</p><h4 id="createsynthesistask-text-voiceid-bitrate-timestamptype" tabindex="-1"><code>createSynthesisTask(text, voiceId, bitrate, timestampType)</code> <a class="header-anchor" href="#createsynthesistask-text-voiceid-bitrate-timestamptype" aria-label="Permalink to &quot;\`createSynthesisTask(text, voiceId, bitrate, timestampType)\`&quot;">​</a></h4><p>This method creates a synthesis task for the provided text and voice.</p><ul><li><code>text</code>: The text to be synthesized.</li><li><code>voiceId</code>: The ID of the voice to be used.</li><li><code>bitrate</code>: The bitrate of the audio.</li><li><code>timestampType</code>: The type of timestamp to be used.</li></ul><p>Returns: A promise that resolves to the ID of the created synthesis task.</p><h4 id="getsynthesistaskstatus-taskid" tabindex="-1"><code>getSynthesisTaskStatus(taskId)</code> <a class="header-anchor" href="#getsynthesistaskstatus-taskid" aria-label="Permalink to &quot;\`getSynthesisTaskStatus(taskId)\`&quot;">​</a></h4><p>This method retrieves the status of a synthesis task based on the provided task ID.</p><ul><li><code>taskId</code>: The ID of the synthesis task.</li></ul><p>Returns: A promise that resolves to the status of the synthesis task.</p><h4 id="speech-text-voiceid-bitrate-timestamptype" tabindex="-1"><code>speech(text, voiceId, bitrate, timestampType)</code> <a class="header-anchor" href="#speech-text-voiceid-bitrate-timestamptype" aria-label="Permalink to &quot;\`speech(text, voiceId, bitrate, timestampType)\`&quot;">​</a></h4><p>This method synthesizes speech based on the provided text and voice.</p><ul><li><code>text</code>: The text to be synthesized.</li><li><code>voiceId</code>: The ID of the voice to be used.</li><li><code>bitrate</code>: The bitrate of the audio.</li><li><code>timestampType</code>: The type of timestamp to be used.</li></ul><p>Returns: A promise that resolves to the synthesized speech data.</p><h3 id="configuration-options" tabindex="-1">Configuration Options <a class="header-anchor" href="#configuration-options" aria-label="Permalink to &quot;Configuration Options&quot;">​</a></h3><ul><li><code>apiKey</code>: Your API key for authentication.</li><li>Other configuration options and their descriptions.</li></ul><h2 id="examples" tabindex="-1">Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;Examples&quot;">​</a></h2><h4 id="stream" tabindex="-1">stream <a class="header-anchor" href="#stream" aria-label="Permalink to &quot;stream&quot;">​</a></h4><p>This method streams the synthesized speech based on the provided parameters.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> speechBuffer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unrealSpeech.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;Scarlett&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;192k&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;libmp3lame&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  0.25</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the synthesized speech buffer as needed</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// play audio</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(speechBuffer);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// save audio</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">save</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(speechBuffer, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;filename.mp3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h4 id="createsynthesistask" tabindex="-1">createSynthesisTask <a class="header-anchor" href="#createsynthesistask" aria-label="Permalink to &quot;createSynthesisTask&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> taskId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unrealSpeech.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createSynthesisTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;Scarlett&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;192k&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;word&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(taskId); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the ID of the created synthesis task as needed</span></span></code></pre></div><h4 id="getsynthesistaskstatus" tabindex="-1">getSynthesisTaskStatus <a class="header-anchor" href="#getsynthesistaskstatus" aria-label="Permalink to &quot;getSynthesisTaskStatus&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> taskId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;task123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Replace with the actual task ID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unrealSpeech.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSynthesisTaskStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(taskId);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(status); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the status of the synthesis task as needed</span></span></code></pre></div><h4 id="speech" tabindex="-1">speech <a class="header-anchor" href="#speech" aria-label="Permalink to &quot;speech&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> speechData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unrealSpeech.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">speech</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;Scarlett&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;192k&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;word&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(speechData); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Use the synthesized speech data as needed</span></span></code></pre></div><h2 id="code-sample" tabindex="-1">Code sample <a class="header-anchor" href="#code-sample" aria-label="Permalink to &quot;Code sample&quot;">​</a></h2><p>You can find a code example here: <a href="https://github.com/unrealspeech/examples/tree/rn-node-backend" target="_blank" rel="noreferrer">code</a></p><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><p>Include common issues and their solutions.</p><h2 id="contributing" tabindex="-1">Contributing <a class="header-anchor" href="#contributing" aria-label="Permalink to &quot;Contributing&quot;">​</a></h2><p>Contributions are welcome! If you find any issues or have suggestions for improvements, please open an issue or submit a pull request.</p><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-label="Permalink to &quot;License&quot;">​</a></h2><p>This project is licensed under the MIT License - see the LICENSE file for details.</p>`,60),h=[n];function l(o,d,p,r,k,c){return a(),e("div",null,h)}const y=s(i,[["render",l]]);export{g as __pageData,y as default};
